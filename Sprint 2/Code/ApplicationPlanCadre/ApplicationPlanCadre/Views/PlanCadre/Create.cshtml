@model ApplicationPlanCadre.Models.PlanCadre

@{
    ViewBag.Title = "Plan cadre - création";
}

<div class="container">

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.idPlanCadre)
        @Html.HiddenFor(model => model.idProgramme)

        <div class="form-horizontal form-box single-action">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <h1>Créer un plan cadre</h1>

            @Html.DisplayFor(model => model.Programme.nom) &nbsp @Html.DisplayFor(model => model.Programme.DevisMinistere.codeProgramme)

            <hr />

            <div class="champ">
                @Html.ValidationMessage("Duplique", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.titreCours, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.titreCours, new { htmlAttributes = new { @maxlength = "150", @class = "form-control small-input" } })
                    @Html.ValidationMessageFor(model => model.titreCours, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.nbHeureTheorie, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.nbHeureTheorie, new { @maxlength = "2", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.nbHeureTheorie, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.nbHeurePratique, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.nbHeurePratique, new { @maxlength = "2", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.nbHeurePratique, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.nbHeureDevoir, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.nbHeureDevoir, new {  @maxlength = "2", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.nbHeureDevoir, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.numeroCours, htmlAttributes: new { @class = "control-label col-md-2" })@*faire une auto completion, numero programme au debut automatique,  et jq a la fin automatique (jq=jonquiere)*@
                <div class="col-md-10">
                    @Html.EditorFor(model => model.numeroCours, new { htmlAttributes = new { @maxlength = "4", @class = "form-control small-input" } })
                    @Html.ValidationMessageFor(model => model.numeroCours, "", new { @class = "text-danger" })
                </div>
            </div>

            <hr />@*drop down list Enonce competence*@




            <hr />

            <div class="form-group">
                @Html.LabelFor(model => model.indicationPedago, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.indicationPedago, new { htmlAttributes = new { @class = "form-control small-input" } })
                    @Html.ValidationMessageFor(model => model.indicationPedago, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.environnementPhys, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.environnementPhys, new { htmlAttributes = new { @class = "form-control small-input" } })
                    @Html.ValidationMessageFor(model => model.environnementPhys, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ressource, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ressource, new { htmlAttributes = new {  @class = "form-control small-input" } })
                    @Html.ValidationMessageFor(model => model.ressource, "", new { @class = "text-danger" })
                </div>
            </div>

            @*ajouter le type (contributive, spécifique, generale)*@


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Suivant" class="fancy-button" />
                    <div class="fancy-button rouge" onclick="location.href='@Url.Action("Info", "Programme", new { idProgramme = Model.idProgramme })'">Annuler</div>
                </div>
            </div>
        </div>
    }
</div>